namespace Core.Code_Team.ClientFilesDown
{
    public class Game_Center_Updata
    {

    }
    public class updatefileinfo_GC
    {
        StringInit Si = new StringInit();
        string[] updata_info_string = new string[] {
            "api/v1/patches_chain/?protocol_version=1.3",
            "&client_type=",
            "&lang=",
            "&metadata_version=",
            "&metadata_protocol_version=5.0",
            "&chain_id=",
            "&installation_id=unknow",
            "&client_current_version=",
            "&locale_current_version=",
            "&sdcontent_current_version=",
            "&udsound_current_version=",
            "&game_id="
        };
        string[] info_file = new string[] { "/game_info.xml", "/game_metadata/metadata.xml" };

        file_info_uc fi = new file_info_uc();
        string _clinet_patch;
        public file_info_uc updatefileinfo_dx(string clinet_patch)
        {
            _clinet_patch = clinet_patch;
            fi.download_files_list_info = Check_void(get_locale_version_info_return_updata_check_url_list(clinet_patch)).Result;
            return fi;
        }
        //获取本地版本信息
        string get_locale_version_info_return_updata_check_url_list(string Clent_Ptch)
        {
            try
            {
                List<string> locale_version_info = new List<string>(); //本地版本信息表
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(Clent_Ptch + info_file[0]); //加载XML文档
                XmlNode root = xmlDoc.SelectSingleNode("protocol").SelectSingleNode("game");
                XmlNodeList root_gc = root.SelectSingleNode("part_versions").ChildNodes;
                foreach (XmlNode elementName in root_gc)
                {
                    locale_version_info.Add(elementName.InnerText);
                }

                string _locale_version_id = root.SelectSingleNode("id").InnerText;

                string _locale_version_client_type = root.SelectSingleNode("client_type").InnerText;

                string _locale_version_url = root.SelectSingleNode("update_urls").InnerText;

                string _locale_version_localization= root.SelectSingleNode("localization").InnerText;

                XmlDocument xmlDocx = new XmlDocument();
                xmlDocx.Load(Clent_Ptch + info_file[1]);
                XmlNode rootx = xmlDocx.SelectSingleNode("protocol");
                string _locale_vuision_metadata_version= rootx.SelectSingleNode("metadata_version").InnerText;

                string _locale_vuision_chain_id = rootx.SelectSingleNode("chain_id").InnerText;

                string updata_url = _locale_version_url+updata_info_string[0]+
                    updata_info_string[1]+ _locale_version_client_type+
                    updata_info_string[2]+ _locale_version_localization+
                    updata_info_string[3]+ _locale_vuision_metadata_version+
                    updata_info_string[4]+ 
                    updata_info_string[5]+ _locale_vuision_chain_id +
                    updata_info_string[6]+
                    updata_info_string[7]+ locale_version_info[0]+
                    updata_info_string[8]+ locale_version_info[1] +
                    updata_info_string[9]+ locale_version_info[2] +
                    updata_info_string[10]+ locale_version_info[3] +
                    updata_info_string[11]+ _locale_version_id
                    ;


                return updata_url;
            }
            catch
            {
                return null;
                //读取WoWSLauncher.cfg出错
            }

        }

        async Task<List<List<fileinfolist>>> Check_void(string data)
        {
            Http2_Get_Data HGD = new Http2_Get_Data();
            List<List<fileinfolist>> Check_void = new List<List<fileinfolist>>();
                string _updata_string = await HGD.Http2_GetData_Void(new Uri(data), null);
                if (!await Check_tf(_updata_string))
                  {
                        XmlDocument doc = new XmlDocument();
                        doc.LoadXml(_updata_string);
                        Check_void.Add(await forxmltohttpurl(doc.SelectSingleNode("protocol").SelectSingleNode("patches_chain").ChildNodes));
                  }
            return Check_void;
        }
        //通过xml获取当前更新类型所有文件的http地址
        Task<List<fileinfolist>> forxmltohttpurl(XmlNodeList str)
        {
            List<fileinfolist> forxmltohttpurl = new List<fileinfolist>();
            foreach (XmlNode n in str)  //循环获取content下所有http节点.主要针对一个clinet为多个补丁包
            {
                if (n.Name=="patch")
                {
                    fileinfolist info = new fileinfolist();
                    string Inx = n.SelectSingleNode("files").SelectSingleNode("name").InnerText;
                    info.file_name = Inx.Substring(Inx.IndexOf("/")+1, Inx.Length-Inx.IndexOf("/")-1);
                    string incf = Regex.Match(n.SelectSingleNode("torrent").InnerText, @"http(.*)patches\/").Value;
                    info.file_url = incf + Inx;
                    info.file_save_file = _clinet_patch+ "/Updates/" + Inx.Substring(0, Inx.IndexOf("/") + 1);
                    forxmltohttpurl.Add(info);
                }
            }
            return Task.FromResult(forxmltohttpurl);
        }
        Task<bool> Check_tf(string sdt)
        {                 
            try
            {
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(sdt);
                XmlNode root = doc.SelectSingleNode("protocol").SelectSingleNode("patches_chain").SelectSingleNode("patch");
                return Task.FromResult(false);                
            }
            catch
            {
                return Task.FromResult(true); //不更新
            }
           
        }

    }
}
